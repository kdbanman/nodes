#META
#####

-? are low priority considerations

#BUGS
#####
- null pointer exception occurs in Selection.java:435 in broadcastChange()

#KARIM
######

- context menus on right click over 3D view

- research maven
	- include controlp5, peasycam, and core processing jars in project (include licenses!)

- explore alternatives to swing for formatted infopanel text

- split ControlPanel.java inner classes into separate files

- conditional element sorting based on transparency
	- see Graph.DepthSortedGroup

- make labels prettier somehow

#CORE FEATURES
##############

- sdb retrieval

- save program state to .nod file
	- define schema within IO.class

- move existing "ERROR: ..." print statements to event log in InfoPanelControllers

- put more detailed feedback for lengthy processes in the event log of InfoPanelControllers

- 2 way data interaction between infobox and graph(textual vs. 3D)
	- hyperlinks with html infobox

-? collapse connections to edge

-? collapse subgraph to node

#REFACTORS
##########

#MODIFIERS
##########

- filter only literals

- filter only numerical literals

- filter only strings

- filter only resources

- select all rdf:comment

- select connected rdf:comment

- select connected rdf:type

- MODIFIERSET (resource can have multiple types) : select all nodes of same rdf:Type

- MODIFIERSET (edge can have multiple triples) : select all edges with common predicate, predicate and object, subject and predicate
	- exclusions:
		-common subject, predicate, and object will select exactly the already-selected edge
		- common subject and object will select exactly the. already-selected edge
		- common subject or object are trivial for the user to figure out - just select the neighborhood of the node he or she wants
	- is there a special case for edges that contain at least one triple in each direction

- select shortest path between 2 nodes

- select most central node of selection

- select most central edge of selection

#MISC
#####

- retitle label button to indicate selected, not all
	- other transformation buttons are affected too

- implement main application arrow controls for camera strafe
	- put these keys in the README under UI systems

- additional logic to Node and Edge isInside() code: whether it visible (opposite the camera from the near frustum plane)
	- if this isn't already there, it should be
	- if it is there, move it to a dedicated boolean method
		- box selection needs to use this to fix the bug where things behind the near frustum are selected
NOTE:  *this is only necessary within Edge*  (already in the Node.inside() code by virtue of vector angle calculation)

- test multiple additions for prefix overwrite (rdf then rdfs documents replicates)  OR  just ensure that we do not overwrite existing prefixes
	- could cause data integrity problems if prefixed names exist in the Graph whose namespace prefixes have changed within the Graph's jena model.

- add numerical size scale
	- 1 pass to find min and max, then set scale for interpolation, then 1 more pass to modifiy scale.

- find some way to swap state around to show color changes on selected nodes

- make color picker better looking

#CLASSES AND INTERFACES
#######################


####################################################
COMPLETED                                 (:r !date)

not a comprehensive changelog - see git log for that
####################################################

Thu Jan  2 15:14:02 MST 2014
- rename the infopanel components more meaningfully

- save jena model as rdfxml

- remove leftover cruft from the plaintext infopanel


Tue Dec 10 17:26:28 MST 2013
- fix html performance issues with timed selectionlistener


Thu Dec  5 20:20:06 MST 2013
- hmtl or controller rendered infobox
	- use swingbox or jeditorpane.  both of these should embed into the existing infopanelframe, it will just take some size/layout consideration.
		- get this thing displaying a test page!


Thu Nov 28 16:43:12 MST 2013
- select common neighborhood of selected nodes

- hmtl or controller rendered infobox
	- use swingbox or jeditorpane.  both of these should embed into the existing infopanelframe, it will just take some size/layout consideration.
		- get this thing displaying a test page!


Sat Nov 16 16:12:41 MST 2013
- newline before "Data Neighborhood" in Edge string renderer

- fix depth-based transparency bug


Thu Oct 31 14:20:36 MDT 2013
- debug graph prefix "error"

- hide/show feature
	- TODO: add from nodes.txt after meeting
	- NOTE: this can be replaced by opacity settings!! wheee


Mon Oct 28 21:42:02 MDT 2013
- merge mouseContent and hovered fields in Nodes.java

- main application thread needs to know hovered element nearest the mouse near-frustum position  (getNearestHovered)
	- drag movement needs to use this
	- replace mouseContent with this


Fri Oct 25 14:54:29 MDT 2013

- implement classloader system so that modifiers do not need to be compiled with the project
	- there are big, complex systems to manage plugins, but mine will just be a text file.  that way menu item ordering is easy.
	- include in text file package as first line, then list all classes:
NOTE:  this was hard to do.  :)



Tue Oct 22 14:20:34 MDT 2013

- remove jars from git

Sun Oct 20 17:12:37 MDT 2013
- split modifier system into separate files in dedicated folder

Sat Oct 19 02:05:22 MDT 2013
- document modifier populator
	- pay special attention to what can be mutated and what cannot
	- maybe private up

Thu Oct 10 00:37:45 MDT 2013
- fix bug where user deletes triples from recent addition, then tries to select recently added subgraph.  fatal crash

- add SPARQL web retrieval

- hover response for info window

- select node corresponding to edge predicate (> 1 triple per edge => >1 entry in modifier menu

- set up state management for hover/select response in infopanel


Thu Sep  5 16:12:16 MDT 2013
- implement exploration mode
	- this wants a popup window pretty badly.  it may require swing to do this with little code
	NOTE: no swing, just in infopanel

- set main window to resizeable
	- below lines in setup almost work, but ugly rendering bugs happen during and immediately after a resize, and (more critically) drag select *box* gets translated and scaled.  also it will crash after enough dragging.
        frame.setResizable(true);
        setupFrameResizeListener();
	NOTE:  the main window is just big now.  good enough.


Fri Aug 23 15:08:00 MDT 2013
- UNDO NOT IMPORTANT FOR PROTOTYPE:
	- implement basic graph stack
	- implement basic graph stack
		- ensure deep copying (may have to keep within Graph so that references to it elsewhere don't get screwed up)
		- this is probably too slow.  it probably needs to store a subset of the structure and know how to restore each part.

- update node and edge removal within Graph to maintain the model.

- updtae node removal process to remove all attached edges and singlet nodes

- replicate and fix concurrent modification bug when adding triples.

- fix keyboard routing problem.  keystrokes are not being sent to control panel PApplet, regardless of window focus.
	- keypresses are sent to control panel just fine with my mac.  try work linux machine tomorrow.
	- upgrading all processing core libraries to 2.01 stable release did not fix problem
	- last ditch.  try reverting to java 6, if that fails then reduce the problem to a minimal example to debug / post to forum

Sun 18 Aug 2013 17:30:20 MDT

- decide whether it is valuable to keep the model around.  it might be a powerful and necessary thing for advanced queries later on, but it is a source of complexity (time and space) to maintain.
	pros:
	- it will be easier to serialize the program state for load/save with it left there, but not by much.
	- it keeps track of label prefixes, which is dandy.
	cons:
	- maintenance over undo and redo operations have not been considered at all.	
NOTE: keeping it around - refactoring Edges to keep references to Statements forced the issue

Fri 19 Jul 2013 14:38:42 MDT

- reimplement expand/contract as radios on a scale button

- center camera option in layout

- update transformation controllers with GraphElement selection
	- implemented, needs testing/debugging.
	- indicate somehow when >1 selected


Thu Jul 18 15:51:57 MDT 2013

- duplicate triples are added to edges. problem.


Wed Jul 17 18:33:09 MDT 2013

- fix copy-paste (only problematic on mac)
	NOTE: this was surprisingly awful.


Mon 15 Jul 2013 14:42:52 MDT

- set all controllers to immovable

- nbrhood selection include old and edges

- hide selection modifier menu header

- load triples, not get triples in tab name

- rename "lexicographical" to "alphabetical"

- try stable processing 2 release
	- NOTE: within Edge, p.box() needed different parameter order

- disable peasycam reset on double click

- get selection pulsation to work nicely

- bolder font with higher contrast color. (pastel orange on default blue)

- brighten main background (scale to white)

- render labels centered on element position

- find out why initially displaying labels is very expensive.  even for one node or edge, a hover triggers a very noticeable lag time.  this scales to absolute unusability when only a few dozen labels are triggered for display at the same time (or even it too short an interval of time)
	- resizing the nodes is similarly expensive

- finish radial layout.  add lexico
	- separate lexico and numerical ordering functions

- fix onLeave() inconsistency.  it happens only (but not always) when leaving an element with a mouse button held.
	- narrowed it down more:  when more than one element is hovered over at a time, then they are left with the mouse button held, only one of them will call onLeave().  the order of entrance in irrelevant, the one that doesn't have onLeave() called is constant for any particular group of elements.


Thu 11 Jul 2013 13:02:27 MDT

- refactor mouse interaction
	- desired behaviour:
		- single, undragged click clears selection unless shift is pressed
			- subsequent release on an element adds it to selection
		- drag from outside an element box-selects
		- drag from within an element drag-moves
	- proposal:
		- rather than a drag behaviour enum in Nodes, keep a class that knows if the cursor is inside an element (and which element it is).  this would keep the selection and dragging logic out of the GraphElement class and inside the main application.
			- if it still makes sense to have an overarching DRAG or SELECT behaviour enum, this class should handle that derivation.

- add drag and drop movement
	- click and drag within node.  move entire selection
	- this is partially implemented, it required a behaviour toggle, and the movement is triggered properly, but doesn't move correctly
	- protect the onDrag() movement function with the DragBehaviour enum

Wed Jul 10 17:38:53 MDT 2013

- move SingleSelector to inner class of Node

- finish neighbor selection modifier

Tue Jul  9 12:15:06 MDT 2013

- populate listbox dynamically using populate() (for selection)

- hook up ListBox items to modify() function
	- maybe populate should maintain the listbox indices, and it should be sent Modifiers.run(event.group().value())
		- if this is the case, then Modifiers should maintain state - indices to modification methods.  perhaps a Map<Integer, Modifier>?

- write first few selection modifiers to unearth the necessary interface
	- test context-sensitivity with:
		- only nodes
		- only edges

- populate selection modifiers based on selection nature

- implement controlpanel method to change color of selected nodes

- implement controlpanel method to change size of selected nodes

Mon  8 Jul 2013 14:01:50 MDT

- disable auto-layout as soon as its tab is not active

- implement control to change label display of selected graph elements

- implement control to change label size of selected graph elements

- remove drag and drop radio

- within main application loop, implement the auto layout of graph when the toggle is selected

- add size tab (will require respacing other transform tabs)
	- size nodes
		- degree
		- betweenness centrality
		- relative lexicographic position (user defined scale)
	- size edges
		- number of predicates
		- betweenness centrality
	NOTE:  size and color are just under the same tab.  sizing algorithms not for this version.  that's for when EVERYTHING gets all context-reactive

- ensure label size adjustment is in the label tab

- add paste functionality to text fields
	- probable best to extend the ControlP5 version and add a keylistener

- find and fix the cause of the SERIOUS performance hit after querying the web
	NOTE:  the performance hit doesn't come from querying the web, this is just a very resource-intensive program.  I only have so much control over performance optimizations since there is such heavy dependence upon ControlP5.  I have the choice:
		1) learn more about the guts of ControlP5 to stop unnecessary computation by better placement of method and state.
		2) reimplement the parts of the ControlP5 that I'm using for button/hover functionality, and structure the code for my 3D performance needs.

Thu Jul  4 15:02:31 MDT 2013

- refactor edge member predicates into a list of jena Triples (or something) (update label machinery accordingly)
	- this will greatly simplify matching Model query results to graph subsets
	- the current implementation of relations, where each edge has a map from predicates to boolean values (latter indicating direction), will overwrite the triple <A,B,C> if the triple <C,B,A> is added
	- question.  since edges are identified by source and destination node identifiers, is it still important to leave the triples unprefixed for uniqueness' sake?
	- label prefixing isn't as simple as just iterating through labelText and prefixing each. (unless jena will replace all occurrences of nsPrefixMap keys in a string instead of just the first occurrence)  TESTED:  it will not.

- prexfixLabel() function iterates through lines, best called from addNode() and addEdge(), since that is when new prefixes could be discovered
	- push prefixing to label mechanism to avoid violating uniqueness of controller names.  
		- think about how to deal with edges properly.  probably similarly to nodes, but it will be a bit slow iterating through the predicates to check all of them.  actually no, there should never be so many predicates as to slow it down significantly, the code will just be a fair bit uglier

- label text content from String to List of Strings (lines of text) so that multiline literals are easy, and so is post-discovery prefixing.

- recalculateLabelDimensions() iterates through list.  should be called within prefixLabel() and anywhere else label is dicked with

- add prefix/unprefix triple methods to graph
	- ensure model is updated before any nodes/edges are created

Wed  3 Jul 2013 11:43:53 MDT

- implement web-retrieval of RDF from URI (will be used within control panel and in exploration mode)

- ugh.  merge with work machine for framed labels
