#MISC
#####

- find out why initially displaying labels is very expensive.  even for one node or edge, a hover triggers a very noticeable lag time.  this scales to absolute unusability when only a few dozen labels are triggered for display at the same time (or even it too short an interval of time)
	- resizing the nodes is similarly expensive

- render labels centered on element position

- fix height/width of text background for labels.

- update node and edge removal within Graph to maintain the model.

- updtae node removal process to remove all attached edges and singlet nodes

- implement main application arrow controls for camera strafe

- (probably within main application loop) implement drag and drop movement of selected nodes.  keep in mind that the controller is currently prepared to prohibit the user from doing this unless the appropriate radio button is active.  this might be stupid.

- add radial lexicographical sorting (sensitive to common subject?  sounds expensive.  maybe just let the user dumbass if they want))

- find some way to swap state around to show color changes on selected nodes

- try stable processing 2 release
	
#CLASSES AND INTERFACES
#######################

- implement basic graph stack
	- ensure deep copying (may have to keep within Graph so that references to it elsewhere don't get screwed up)

- write first few selection modifiers to unearth the necessary interface
	- test context-sensitivity with:
		- only nodes
		- only edges
		- clear selection

- implement error/notification popup window system

#CONTROL LOGIC
##############

- populate selection modifiers based on selection nature

- disable certain sizing options based on selection nature

#MODIFIERS
##########

- select shortest path between 2 nodes

#OPTIONS
########

- exploration: colorize based on database or web retrieval
- exploration: get from web, database, or both


###########################
COMPLETED        (:r !date)
###########################

Tue Jul  9 12:15:06 MDT 2013

- implement controlpanel method to change color of selected nodes

- implement controlpanel method to change size of selected nodes

Mon  8 Jul 2013 14:01:50 MDT

- disable auto-layout as soon as its tab is not active

- implement control to change label display of selected graph elements

- implement control to change label size of selected graph elements

- remove drag and drop radio

- within main application loop, implement the auto layout of graph when the toggle is selected

- add size tab (will require respacing other transform tabs)
	- size nodes
		- degree
		- betweenness centrality
		- relative lexicographic position (user defined scale)
	- size edges
		- number of predicates
		- betweenness centrality
	NOTE:  size and color are just under the same tab.  sizing algorithms not for this version.  that's for when EVERYTHING gets all context-reactive

- ensure label size adjustment is in the label tab

- add paste functionality to text fields
	- probable best to extend the ControlP5 version and add a keylistener

- find and fix the cause of the SERIOUS performance hit after querying the web
	NOTE:  the performance hit doesn't come from querying the web, this is just a very resource-intensive program.  I only have so much control over performance optimizations since there is such heavy dependence upon ControlP5.  I have the choice:
		1) learn more about the guts of ControlP5 to stop unnecessary computation by better placement of method and state.
		2) reimplement the parts of the ControlP5 that I'm using for button/hover functionality, and structure the code for my 3D performance needs.

Thu Jul  4 15:02:31 MDT 2013

- refactor edge member predicates into a list of jena Triples (or something) (update label machinery accordingly)
	- this will greatly simplify matching Model query results to graph subsets
	- the current implementation of relations, where each edge has a map from predicates to boolean values (latter indicating direction), will overwrite the triple <A,B,C> if the triple <C,B,A> is added
	- question.  since edges are identified by source and destination node identifiers, is it still important to leave the triples unprefixed for uniqueness' sake?
		- yes. imagine the triple <aaaA,b:B,c:C> is added, then the prefix a (for aaa) is discovered, then the same triple is added again.  the new triple will be added to the list, which is incorrect.  
	- label prefixing isn't as simple as just iterating through labelText and prefixing each. (unless jena will replace all occurrences of nsPrefixMap keys in a string instead of just the first occurrence)  TESTED:  it will not.

- prexfixLabel() function iterates through lines, best called from addNode() and addEdge(), since that is when new prefixes could be discovered
	- push prefixing to label mechanism to avoid violating uniqueness of controller names.  
		- think about how to deal with edges properly.  probably similarly to nodes, but it will be a bit slow iterating through the predicates to check all of them.  actually no, there should never be so many predicates as to slow it down significantly, the code will just be a fair bit uglier

- label text content from String to List of Strings (lines of text) so that multiline literals are easy, and so is post-discovery prefixing.

- recalculateLabelDimensions() iterates through list.  should be called within prefixLabel() and anywhere else label is dicked with

- add prefix/unprefix triple methods to graph
	- ensure model is updated before any nodes/edges are created

Wed  3 Jul 2013 11:43:53 MDT

- implement web-retrieval of RDF from URI (will be used within control panel and in exploration mode)

- ugh.  merge with work machine for framed labels
